import fastifyFormbody from "@fastify/formbody";
import fastifyMultipart from "@fastify/multipart";
import fastifyStatic from "@fastify/static";
import exceljs from "exceljs";
import fastify from "fastify";
import fs from "fs";
import path from "path";
import findNameByColumn from "./functions/findNameByColumn";

const app = fastify({
  logger: true,
});

const rootDirectory = path.resolve(__dirname, "..");

app.register(fastifyStatic, {
  root: path.join(rootDirectory, "public"),
});
app.register(fastifyMultipart, {
  limits: {
    fileSize: 30 * 1024 * 1024, // 30MB em bytes
  },
});

app.register(fastifyFormbody);

app.addHook("onSend", async (request, reply, payload) => {
  console.log("enviando");

  reply.header("Access-Control-Allow-Origin", "*");
});

app.addHook("onRequest", (request, reply, done) => {
  console.log("Recebendo");

  // Configuração básica para permitir solicitações de qualquer origem
  reply.header("Access-Control-Allow-Origin", "*");
  reply.header("Access-Control-Allow-Methods", "GET, POST, OPTIONS");
  reply.header("Access-Control-Allow-Headers", "Content-Type");

  // Continue com a execução normal do aplicativo
  done();
});

app.get("/", async (request, reply) => {
  return reply.sendFile("index.html");
});

app.get("/config-files", async (request, reply) => {
  const configDirectory = path.join(rootDirectory, "config");

  try {
    // Lê os arquivos no diretório de configuração
    const files = fs.readdirSync(configDirectory);

    // Envia a lista de arquivos como resposta
    reply.send({
      success: true,
      files,
    });
  } catch (error) {
    app.log.error(
      `Erro ao obter a lista de arquivos de configuração: ${error}`
    );
    // Trata qualquer erro durante a leitura do diretório
    reply.status(500).send({
      success: false,
      error: "Erro ao obter a lista de arquivos de configuração.",
    });
  }
});

app.post("/process-excel", async (request, reply) => {
  try {
    const data = await request.file();

    const configFileName = request.headers["configfile"] as string;

    if (data && configFileName) {
      const storedFilePath = `./excel-files/${data.filename}`;

      // Lê o arquivo de configuração
      const configPath = path.join(rootDirectory, "config", configFileName);

      const configData = fs.readFileSync(configPath, "utf-8");
      const config = JSON.parse(configData);

      // Cria uma instância do workbook
      const workbook = new exceljs.Workbook();
      await workbook.xlsx.readFile(storedFilePath);

      // Use os valores do arquivo de configuração
      let initialRow = await findNameByColumn(
        workbook,
        config.planilha,
        config.colunaInicial,
        config.valorInicial
      );

      if (initialRow == null) {
        throw new Error(
          `Valor inicial - ${config.valorInicial} não encontrado na planilha.`
        );
      }

      let finalRow = await findNameByColumn(
        workbook,
        config.planilha,
        config.colunaFinal,
        config.valorFinal
      );

      if (finalRow == null) {
        throw new Error(
          `Valor final - ${config.valorFinal} não encontrado na planilha.`
        );
      }

      reply.send({
        success: true,
        initialRow,
        finalRow,
      });
    }
  } catch (error: any) {
    app.log.error(`Erro ao processar o arquivo: ${error.message}`);
    reply.status(400).send({
      success: false,
      error: error.message,
    });
  }
});

const PORT = 3000;

app.listen({ port: PORT }, (err) => {
  if (err) throw err;
  console.log(`Servidor rodando em http://localhost:${PORT}`);
});
